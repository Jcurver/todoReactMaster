{"version":3,"sources":["atoms.tsx","CategoryList.tsx","Category_Options.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["persistAtom","recoilPersist","categoryState","atom","key","default","effects_UNSTABLE","selectedCategoryIdState","undefined","toDoState","toDoSelector","selector","get","todos","categoryId","filter","todo","CategoryList","text","id","setToDos","useSetRecoilState","onClick","oldToDos","targetIndex","findIndex","toDo","slice","CateOptDiv","styled","div","Option","span","Category_Options","setCategories","useForm","register","handleSubmit","setValue","onSubmit","categoryText","prevCategories","Date","now","required","type","placeholder","CreateToDo","selectedCategoryId","useRecoilValue","console","log","ToDo","categories","updateCategory","category","event","newToDo","style","marginRight","map","Div","H1","h1","ToDoList","toDos","useRecoilState","selectCategory","onChange","currentTarget","value","aToDo","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","Flex","MakeOption","App","categoryList","aOption","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.1ffe56de.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\nimport { recoilPersist } from 'recoil-persist';\n\nconst { persistAtom } = recoilPersist()\n\nexport interface Category {\n  text: string;\n  id: number;\n}\n// toDos 배열\nexport const categoryState = atom<Category[]>({\n  key: 'category',\n  default: [],\n  effects_UNSTABLE: [persistAtom],\n});\n\nexport const selectedCategoryIdState = atom<number | undefined>({\n  key: 'selectedCategoryId',\n  default: undefined,\n  effects_UNSTABLE: [persistAtom],\n});\n\nexport interface IToDo {\n  text: string;\n  categoryId: number;\n  id: number;\n}\n\nexport const toDoState = atom<IToDo[]>({\n  key: 'toDo',\n  default: [],\n  effects_UNSTABLE: [persistAtom],\n});\n\nexport const toDoSelector = selector({\n  key: 'toDoSelector',\n\n  get: ({ get }) => {\n    const todos = get(toDoState);\n    const categoryId = get(selectedCategoryIdState);\n    return todos.filter((todo) => todo.categoryId === categoryId);\n  },\n});\n","import React from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { collapseTextChangeRangesAcrossMultipleVersions } from \"typescript\";\nimport { Category, categoryState } from \"./atoms\";\nfunction CategoryList({ text, id}: Category) {\n  const setToDos = useSetRecoilState(categoryState);\n\n  const deleteCategory = () => {\n    setToDos((oldToDos) => {\n      // 수정하고 싶은 인덱스의 넘버를 가져온다.\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    })\n  }\n  return (\n    <li>\n      <span>{text}</span>\n      <button onClick={deleteCategory}>❌</button>\n    </li>\n  );\n}\nexport default CategoryList;\n","import { clear } from \"node:console\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { categoryState } from \"./atoms\";\n\n// const category = document.querySelector(\"#category\");\n\n\nconst CateOptDiv = styled.div`\n  height: auto;\n\n  word-break: break-all;\n`;\nconst Option = styled.span`\n  font-size: 30px;\n`;\n\ninterface IForm {\n  categoryText: string;\n}\n\n\nfunction Category_Options() {\n\n  const setCategories = useSetRecoilState(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n\n  const handleCategories = ({ categoryText }: IForm) => {\n    setCategories((prevCategories) => [\n      { text: categoryText, id: Date.now() },\n      ...prevCategories,\n    ]);\n    setValue(\"categoryText\", \"\");\n    \n  };\n\n  return (\n    <CateOptDiv>\n      <Option>Make Category</Option>\n      <hr />\n      <form onSubmit={handleSubmit(handleCategories)}>\n        <input\n          {...register(\"categoryText\", { required: \"please write\" })}\n          type=\"text\"\n          placeholder=\"write what you want...\"\n          id=\"input\"\n        />\n        <button>Make!</button>\n        <ul id=\"category\"></ul>\n      </form>\n    </CateOptDiv>\n  );\n}\n\nexport default Category_Options;\n","import { useForm } from 'react-hook-form';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { selectedCategoryIdState, toDoState } from '../atoms';\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const selectedCategoryId = useRecoilValue(selectedCategoryIdState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n\n  const handleValid = ({ toDo }: IForm) => {\n    if (!selectedCategoryId) {\n      console.log('invalid categoryid')\n      return;\n    }\n\n    setToDos((oldToDos) => [\n      { text: toDo, categoryId: selectedCategoryId, id: Date.now() },\n      ...oldToDos,\n    ]);\n    setValue('toDo', '');\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register('toDo', {\n          required: 'Please write a To Do',\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport {\n  Category,\n  categoryState,\n  IToDo,\n  selectedCategoryIdState,\n  toDoState,\n} from '../atoms';\n\n\nfunction ToDo({ text, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const categories = useRecoilValue(categoryState);\n  // const setCategories = useSetRecoilState(categoryState);\n  const selectedCategoryId = useRecoilValue(selectedCategoryIdState);\n  const deleteToDo = () =>{\n    setToDos((oldToDos) => {\n      // 수정하고 싶은 인덱스의 넘버를 가져온다.\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    })\n    // setCategories(categories.filter((data) => data.id !==id))\n\n\n  }\n  const updateCategory =\n    (category: Category) => (event: React.MouseEvent<HTMLButtonElement>) => {\n      setToDos((oldToDos) => {\n        // 수정하고 싶은 인덱스의 넘버를 가져온다.\n        const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n        // const oldToDo = oldToDos[targetIndex];\n        const newToDo = { text, id, categoryId: category.id };\n        return [\n          ...oldToDos.slice(0, targetIndex),\n          newToDo,\n          ...oldToDos.slice(targetIndex + 1),\n        ];\n      });\n    };\n\n  return (\n    <li>\n      <span style={{ marginRight: '10px' }}>{text}</span>\n      {categories.map(\n        (category) =>\n          category.id !== selectedCategoryId && (\n            <button onClick={updateCategory(category)}>{category.text}</button>\n          )\n          )}\n          <button onClick={deleteToDo}>❌</button>\n      {/* {category !== Categories.DOING && (\n         <button name={Categories.DOING} onClick={onClick}>\n           {Categories.DOING}\n         </button>\n       )}\n       {category !== Categories.TO_DO && (\n         <button name={Categories.TO_DO} onClick={onClick}>\n           {Categories.TO_DO}\n         </button>\n       )}\n       {category !== Categories.DONE && (\n         <button name={Categories.DONE} onClick={onClick}>\n           {Categories.DONE}\n         </button>\n       )} */}\n    </li>\n  );\n}\n\nexport default ToDo;\nfunction category(category: any): React.MouseEventHandler<HTMLButtonElement> | undefined {\n  throw new Error('Function not implemented.');\n}\n\n","import React, { Component } from 'react';\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { categoryState, selectedCategoryIdState, toDoSelector } from '../atoms';\nimport CreateToDo from './CreateToDo';\nimport ToDo from './ToDo';\n\nconst Div = styled.div`\n  height: auto;\n  width: 60%;\n  margin: 3% 3%;\n  word-break: break-all;\n`;\n\nconst H1 = styled.h1`\n  font-size: 30px;\n`;\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const categories = useRecoilValue(categoryState);\n  const [selectedCategoryId, selectCategory] = useRecoilState(\n    selectedCategoryIdState\n  );\n  const onChange = (event: React.FormEvent<HTMLSelectElement>) => {\n    selectCategory(+event.currentTarget.value);\n  };\n\n  return (\n    <Div>\n      <H1>To Dos</H1>\n      <hr />\n      <span>categories : </span>\n      <select onChange={onChange} value={selectedCategoryId}>\n        <option>Select Option</option>\n        {categories.map((category) => (\n          <option value={category.id}>{category.text}</option>\n        ))}\n        {/* <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option> */}\n      </select>\n      <hr />\n      <CreateToDo />\n      <hr />\n      {toDos?.map((aToDo) => (\n        <ToDo key={aToDo.id} {...aToDo} />\n      ))}\n    </Div>\n  );\n}\n\n// interface IForm {\n//   email: string;\n//   firstName: string;\n//   lastName: string;\n//   userName: string;\n//   password: string;\n//   password1: string;\n//   extraError?: string;\n// }\n// // useForm을 컴포넌트에서 호출하면 register이랑 handleSubmit이 제공된다.\n// function ToDoList() {\n//   const {\n//     register,\n//     handleSubmit,\n//     formState: { errors },\n//     setError,\n//   } = useForm<IForm>({\n//     defaultValues: {\n//       email: \"@naver.com\",\n//     },\n//   });\n//   // onValid 함수는 모든 인풋 조건을 만족했을 때 호출된다.\n//   const onValid = (data: IForm) => {\n//     if (data.password !== data.password1) {\n//       setError(\n//         \"password1\",\n//         { message: \"Password are not the same\" },\n//         { shouldFocus: true }\n//         // shouldFocus : 오류 시 커서를 해당 인폿에 놓는 기능\n//       );\n//     }\n//     // setError(\"extraError\", { message: \"Server offline\" });\n//     // extraError : 전역에 해당하는 에러\n//     console.log(data);\n//   };\n//   console.log(errors);\n\n//   return (\n//     <div>\n//       <form\n//         style={{ display: \"flex\", flexDirection: \"column\" }}\n//         onSubmit={handleSubmit(onValid)}\n//       >\n//         <input\n//           {...register(\"email\", {\n//             required: \"Email is required\",\n//             pattern: {\n//               value: /^[A-Za-z0-9._%+-]+@naver.com$/,\n//               message: \"Only naver.com emails allowed\",\n//             },\n//           })}\n//           placeholder=\"email\"\n//         />\n//         <span>{errors?.email?.message}</span>\n//         <input\n//           {...register(\"firstName\", {\n//             required: \"write here\",\n//           validate:{ noNico : async (value) => value.includes(\"nico\") ? \"no nicos allowed\" : true,\n//           noNick: (value) => value.includes(\"nick\") ? \"no nicks allowed\" : true,\n//         }\n\n//           })}\n//           placeholder=\"firstName\"\n//         />\n//         <span>{errors?.firstName?.message}</span>\n\n//         <input\n//           {...register(\"lastName\", { required: \"write here\" ,\n\n//         })}\n//           placeholder=\"lastName\"\n//         />\n//         <span>{errors?.lastName?.message}</span>\n\n//         <input\n//           {...register(\"userName\", { required: \"write here\", minLength: 10 })}\n//           placeholder=\"userName\"\n//         />\n//         <span>{errors?.userName?.message}</span>\n\n//         <input\n//           {...register(\"password\", { required: \"write here\" })}\n//           placeholder=\"password\"\n//         />\n//         <span>{errors?.password?.message}</span>\n\n//         <input\n//           {...register(\"password1\", {\n//             required: \"Password is required\",\n//             minLength: {\n//               value: 5,\n//               message: \"Your password is too short!\",\n//             },\n//           })}\n//           placeholder=\"password1\"\n//         />\n//         <span>{errors?.password1?.message}</span>\n\n//         <button>Add</button>\n//         <span>{errors?.extraError?.message}</span>\n//       </form>\n//     </div>\n//   );\n// }\n\nexport default ToDoList;\n","import { useRecoilValue } from 'recoil';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { categoryState } from './atoms';\nimport CategoryList from './CategoryList';\nimport CategoryOptions from './Category_Options';\nimport ToDoList from './components/ToDoList';\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n\n`;\n\nconst Flex = styled.div`\n  display: flex;\n`;\nconst MakeOption = styled.div`\n  width: 25%;\n  height: auto;\n  margin: 3%;\n`;\nfunction App() {\n  const categoryList = useRecoilValue(categoryState);\n  return (\n    <>\n      <GlobalStyle />\n      <Flex>\n        <MakeOption>\n          <CategoryOptions />\n          <hr />\n          {categoryList?.map((aOption) => (\n          <CategoryList key={aOption.id} {...aOption} />\n        ))}\n        </MakeOption>\n        <ToDoList />\n      </Flex>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};"],"sourceRoot":""}